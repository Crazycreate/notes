Git:分布式版本控制
Git原理：Git本地有三个工作区域：工作目录（Working Directory）、暂存区（Stage/Index）、资源库（Repository或Git Directory）。
远程的git仓库（Remote Directory）.
Workspace:工作区，平时存放代码的地方
Index/Stage：暂存区,用于临时存放你的改动，事实上他只是个文件，保存即将提交到文件列表信息
Repository：仓库区（本地仓库），就是安全存放数据的位置，这里有你提交所有版本的数据，其中HEAD指向最新放入仓库的版本
Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换

rm 文件名 //删除文件


1.两种建立仓库的方式
建立全新的仓库：git init
克隆远程仓库：git clone [url]
*完整的将远程库下载到本地
*创建origin远程地址别名
*初始化本地库




2.git add . //添加所有文件到暂存区
git commit -m "提交消息描述" test.java //提交暂存区中的内容到本地仓库

忽略文件：.gitignore
https://gitee.com/crazycreate/gitdirectory.git

git本地库：其实git的本地仓库就是存在.git的文件夹，因为我们在添加git的时候，
会进行初始化本地库的操作：git init，最后会在当前目录下生成.git的目录，.git目录下存放的是本地库相关的文件和子目录

3.四种状态：
Untracked：未被跟踪，没有进git库
Unmodify:文件已入库，未被修改
Modified:已被修改，没有其他操作
Staged:暂存状态

4.git log //打印日志
git log --oneline //简洁显示
git reflog //方便查看指针需要移动多少到某个版本

git reset --hard 【索引值】
git reset --hard 9dce605//把hard指针指向某一个版本的hash值 版本直接回退

5.分支：
*同时并行推进多个功能开发。提高开发效率
*如果某一个分支开发失败，不会影响其他分支

git branch -v查看分支
git branch hot_fix 创建分支    【注：文件的内容跟创建的哪一刻保持一致】
git checkout hot_fix 切换分支
合并：首先切换到主分支上：git checkout master
之后：合并：git merge  hot_fix

合并冲突：
分支表现：
dafsa
asasdx
asdsas
bbbbbbbb
cccccccccc
<<<<<<< HEAD
ddddddddddd  changed by master 
RRRRRRR
=======
ddddddddddid changed by hot_fix
RRRRRRR   
>>>>>>> hot_fix
DDDDDDD

冲突的解决：
*编辑文件，删除特殊符号
修改文件
git add 【文件名】
git commit -m "日志信息" //这里不加文件名

git的原理：通过指针


5.git推送远程仓库
git remote add github https://github.com/Crazycreate/javaWeb.git //增加并重命名
git push github master //推送到那个仓库 哪个分支

git 进行远程库拉取
pull = fetch + merge
git fetch origin(https://github.com/Crazycreate/javaWeb.git) master//仅仅是拉取下来，并没有合并
git fetch [远程库地址别名][远程分支名]
git merge origin/master // git merge [远程库地址别名/远程分支名]

git push 不成功的问题解决：
1.如我在Github新建一个仓库，写了License，然后把本地一个写了很久仓库上传。这时会发现 github 的仓库和本地的没有一个共同的  commit  
所以  git  不让提交，认为是写错了  origin  ，如果开发者确定是这个 origin 就可以使用  --allow-unrelated-histories  告诉 git 自己确定
git pull origin master --allow-unrelated-histories 




























